{"version":3,"sources":["VehicleGeometry.js"],"names":["tiUrl","geojson","Number","prototype","round","places","Math","VehicleGeometry","patterns","nextProps","pat","key","geom","points","pts","polyline","decode","revCoords","coordinates","c","push","reverse","vehicle","a","agencyId","p","shapeId","ap","d","Date","now","getAgencyPattern","retVal","heading","geomWsUrl","getUrl","utils","log","fetch","then","res","json","indexOf","cachePatternGeojson","cachePatternEncoded","catch","error","start","pt","turf","point","lat","lon","line","lineString","snapped","nearestPointOnLine","units","properties","index","end","callGeometryWS","geomGray","geomColor","mid","stopSequence","findPointOnLine","i","length","geometry","props","trackedVehicle","pattern","getGeometry","gray","color","segments","MapLayer"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { FeatureGroup, MapLayer, Polyline } from 'react-leaflet';\nimport polyline from '@mapbox/polyline';\nimport * as turf from '@turf/turf';\nimport * as utils from '../utils';\n\n// const tiUrl = \"https://maps.trimet.org/otp_mod/index\";\n// const tiUrl = \"http://localhost:54445/ti\";\n//const tiUrl = \"https://maps7.trimet.org/ti/index\";\nconst tiUrl = \"https://newplanner.trimet.org/ws/ti/v0/index\";  // TODO: FIX ME !!\n\n//const geojson = \"\";  // use this setting if want to use encoded vs. geojson\nconst geojson = \"/geojson\";\n\n\nNumber.prototype.round = function(places) {\n  return +(Math.round(this + \"e+\" + places)  + \"e-\" + places);\n}\n\nclass VehicleGeometry extends MapLayer {\n  patterns = [];\n\n  componentDidMount() {}\n  componentWillUnmount() {}\n  componentWillReceiveProps(nextProps) {}\n  createLeafletElement() {}\n  updateLeafletElement() {}\n\n  cachePatternEncoded(pat, key) {\n    let geom = pat.points;\n    const pts = polyline.decode(geom);\n    this.patterns[key] = pts;\n  }\n\n  cachePatternGeojson(pat, key) {\n    /**\n     * will cache the [[lat,lon], [lat,lon], etc...] coords\n     * note: geojson uses [lon,lat] (e.g., [X, Y], so must reverse that to match encoded coords\n     */\n    let revCoords = [];\n    for(const c of pat.coordinates)\n      revCoords.push(c.reverse())\n    this.patterns[key] = revCoords;\n  }\n\n  getAgencyPattern(vehicle) {\n    const a = vehicle.agencyId || \"TriMet\";\n    const p = vehicle.shapeId;\n    return `${a}:${p}`;\n  }\n\n  getUrl(vehicle, ap) {\n    const d = Date.now();\n    if(!ap)\n      ap = this.getAgencyPattern(vehicle);\n\n    let retVal = `${tiUrl}/patterns/${ap}/geometry${geojson}?date=${d}`;\n    return retVal\n  }\n\n  isNorthbound(vehicle) {\n    return (vehicle.heading <= 45.0 || vehicle.heading >= 315.0);\n  }\n  isSouthbound(vehicle) {\n    return (vehicle.heading >= 135.0 && vehicle.heading <= 225.0);\n  }\n  isEastbound(vehicle) {\n    return (vehicle.heading > 45.0 && vehicle.heading < 135.0);\n  }\n  isWestbound(vehicle) {\n    return (vehicle.heading > 225.0 && vehicle.heading < 315.0);\n  }\n\n  callGeometryWS(vehicle) {\n    // https://maps.trimet.org/otp_mod/index/patterns/TriMet:190:0:04/geometry\n    let retVal = null;\n\n    const ap = this.getAgencyPattern(vehicle);\n    let geomWsUrl = this.getUrl(vehicle, ap);\n\n    utils.log(\"Calling GEO URL: \" + geomWsUrl, true);\n    fetch(geomWsUrl)\n    .then(res => {\n      retVal = res.json();\n      return retVal;\n    })\n    .then(json => {\n      if(geomWsUrl.indexOf('geojson') >= 0)\n        this.cachePatternGeojson(json, ap);\n      else\n        this.cachePatternEncoded(json, ap);\n    })\n    .catch(error => {\n      utils.log(\"VEH GEOMETRY fetch() error: \" + error, true);\n    });\n    return retVal;\n  }\n\n  findPointOnLine(vehicle, geom) {\n    utils.start();\n    let retVal = 0;\n\n    let pt = turf.point([vehicle.lat, vehicle.lon]);\n    let line = turf.lineString(geom);\n    let snapped = turf.nearestPointOnLine(line, pt, {units: 'miles'});\n    if(snapped && snapped.properties.index) {\n      retVal = snapped.properties.index;\n    }\n    utils.end();\n\n    return retVal;\n  }\n\n  getGeometry(vehicle) {\n    /**\n     * find the vehicle's pattern, either in cache or via the pattern service (which is not request/\n     * /response, thus might not come back in this call)\n     */\n    let retVal = null;\n\n    // step 1: get the geometry (either from cache or by calling the pattern service)\n    const key = this.getAgencyPattern(vehicle);\n    let geom = this.patterns[key];\n    if(!geom) {\n      this.callGeometryWS(vehicle);\n      geom = this.patterns[key];\n    }\n\n    // step 2: if we have a line geometry, let's break it in 2 at the vehicle location\n    if(geom) {\n      let geomGray = [];\n      let geomColor = [];\n      let mid = 0;\n\n      if(vehicle.stopSequence === 1)\n        mid = 0;\n      else\n        mid = this.findPointOnLine(vehicle, geom);\n\n      for(let i = 0; i < geom.length; i++) {\n        if(i <= mid)\n          geomGray.push(geom[i]);\n        if(i >= mid)\n          geomColor.push(geom[i]);\n      }\n      retVal = [\n        {key: key + \"-PAST\", geometry: geomGray},\n        {key: key + \"-FUTURE\", geometry: geomColor},\n      ];\n\n    }\n\n    return retVal;\n  }\n\n  render () {\n    const vehicle = this.props.trackedVehicle;\n    if(!vehicle)\n      return <FeatureGroup />;\n\n    let pattern = this.getGeometry(vehicle);\n    if(!pattern)\n      return <FeatureGroup />;\n\n    utils.log(`drawing geometry for pattern ${this.getAgencyPattern(vehicle)}`);\n\n    const gray = '#555555';\n    const color = '#00bfff';\n    const segments = [];\n    segments.push(\n      <Polyline\n        key={pattern[0].key}\n        positions={pattern[0].geometry}\n        weight={4}\n        color={gray}\n        opacity={0.8}\n      />\n    );\n    segments.push(\n      <Polyline\n        key={pattern[1].key}\n        positions={pattern[1].geometry}\n        weight={4}\n        color={color}\n        opacity={0.8}\n      />\n    );\n\n    return segments.length > 0\n      ? <FeatureGroup><div>{segments}</div></FeatureGroup>\n      : <FeatureGroup />;\n  }\n}\n\nexport default VehicleGeometry;\n"]}