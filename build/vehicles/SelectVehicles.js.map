{"version":3,"sources":["SelectVehicles.js"],"names":["SelectVehicles","state","selected_routes","selected_stop","vehicles","route_data","getVehicles","refresh","props","r","_refreshTimer","setInterval","clearInterval","setBusy","visible","_startRefreshing","_stopRefreshing","nextProps","res","retVal","lm","headers","get","lmd","Date","lastModified","lastTimeStamp","e","console","log","_isBusy","val","d","now","routeId","default","isBusy","fetch","api","then","isNewer","json","setState","length","map","v","i","MapLayer"],"mappings":"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","sourcesContent":["import 'leaflet';\nimport React from 'react';\nimport { FeatureGroup,  MapLayer } from \"react-leaflet\";\n\nimport VehicleMarker from \"./VehicleMarker\";\n\n// polyfills\nimport 'promise-polyfill/src/polyfill';\nimport 'whatwg-fetch';\n\nclass SelectVehicles extends MapLayer {\n  state = {\n    selected_routes: [],\n    selected_stop: null,\n\n    vehicles: [],\n    route_data: []  // TBD Array of <RouteData > components, which comprise route and stop geo data\n  };\n\n  _startRefreshing() {\n    // initial vehicle refresh\n    this.getVehicles();\n\n    // get refresh values (default 10 seconds), and convert from secs to millisecs\n    let refresh = 10000;\n    if (this.props.refresh) {\n      let r = this.props.refresh;\n      if (r > 0 && r <= 100)\n        r = r * 1000;\n      if (r >= 1000 && r < 100000)\n        refresh = r;\n    }\n\n    // do the recurring refresh of the get vehicles AJAX call\n    this._refreshTimer = setInterval(() => {\n      this.getVehicles();\n    }, refresh);\n  }\n\n  _stopRefreshing() {\n    if (this._refreshTimer) {\n      clearInterval(this._refreshTimer);\n      this.setBusy(false);\n    }\n  }\n\n  componentDidMount() {\n    if (this.props.visible) {\n      this._startRefreshing();\n    }\n  }\n\n  componentWillUnmount() {\n    this._stopRefreshing();\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (!this.props.visible && nextProps.visible) {\n      this._startRefreshing();\n    }\n    else if (this.props.visible && !nextProps.visible) {\n      this._stopRefreshing();\n    }\n  }\n\n  isNewer(res) {\n    /** compares datestamp header of the data to last load's datestamp */\n    let retVal = true;\n    try {\n      let lm = res.headers.get('Last-Modified');\n      let lmd = new Date(lm);\n\n      if(this.lastModified === null) {\n        this.lastModified == lmd;  // last modified is empty, so set it and say data is new\n        retVal = true;\n      }\n      else {\n        if(this.lastTimeStamp > lmd)\n          retVal = false;\n        else\n          this.lastTimeStamp = lmd;\n      }\n    }\n    catch(e) {\n      console.log(e);\n    }\n    return retVal;\n  }\n\n  isBusy() {\n    return this._isBusy;\n  }\n\n  setBusy(val) {\n    this._isBusy = val;\n  }\n\n  getVehicles() {\n    const d = Date.now();\n    const r = this.props.routeId || this.props.default;  // (might have to strip off TriMet, etc...\n\n    // wrap the fetch with\n    if(!this.isBusy()) {\n      this.setBusy(true);\n\n      fetch(`${this.props.api}/routes/${r}?time=${d}`)\n      .then(res => {\n        let retVal = null;\n        if(this.isNewer(res))\n          retVal = res.json();\n        return retVal;\n      })\n      .then(json => {\n        this.setBusy(false);\n        if(json != null)\n          this.setState({\n            vehicles: json\n          });\n      });\n    }\n    else {\n      console.log(\"note: previous vehicle /q still running...will skip this update and wait (to avoid race-condition)\");\n    }\n  }\n\n  // need to implement create interface (and update interface for older React-Leaflet versions)\n  createLeafletElement(props) {}\n  updateLeafletElement(props) {}\n\n  render() {\n    let vehicles = this.state.vehicles;\n    console.log(vehicles.length);\n\n    if(!vehicles || vehicles.length === 0)\n      return <FeatureGroup id=\"vehicles fg\" />;\n    else\n      return (\n        <FeatureGroup id=\"vehicles fg\" >\n          { vehicles.map((v, i) => <VehicleMarker key={\"vm\" + i} vehicle={v} />) }\n        </FeatureGroup>\n      );\n  }\n}\n\nexport default SelectVehicles;\n"]}