{"version":3,"sources":["SelectVehicles.js"],"names":["SelectVehicles","state","selected_routes","selected_stop","vehicles","route_data","getVehicles","refresh","props","r","_refreshTimer","setInterval","clearInterval","visible","_startRefreshing","_stopRefreshing","nextProps","d","Date","now","routeId","default","fetch","api","then","res","json","setState","console","log","length","map","v","MapLayer"],"mappings":";;;;;;;;;;;AAAA;;AAEA;;AACA;;AAEA;;AAGA;;AACA;;;;;;;;;;;;;;;;;;;;;;IAEMA,c;;;;;;;;;;;;;;;;8MACJC,K,GAAQ;AACNC,MAAAA,eAAe,EAAE,EADX;AAENC,MAAAA,aAAa,EAAE,IAFT;AAINC,MAAAA,QAAQ,EAAE,EAJJ;AAKNC,MAAAA,UAAU,EAAE,EALN,CAKU;;AALV,K;;;;;uCAQW;AAAA;;AACjB;AACA,WAAKC,WAAL,GAFiB,CAIjB;;AACA,UAAIC,OAAO,GAAG,KAAd;;AACA,UAAI,KAAKC,KAAL,CAAWD,OAAf,EAAwB;AACtB,YAAIE,CAAC,GAAG,KAAKD,KAAL,CAAWD,OAAnB;AACA,YAAIE,CAAC,GAAG,CAAJ,IAASA,CAAC,IAAI,GAAlB,EACEA,CAAC,GAAGA,CAAC,GAAG,IAAR;AACF,YAAIA,CAAC,IAAI,IAAL,IAAaA,CAAC,GAAG,MAArB,EACEF,OAAO,GAAGE,CAAV;AACH,OAZgB,CAcjB;;;AACA,WAAKC,aAAL,GAAqBC,WAAW,CAAC,YAAM;AACrC,QAAA,MAAI,CAACL,WAAL;AACD,OAF+B,EAE7BC,OAF6B,CAAhC;AAGD;;;sCAEiB;AAChB,UAAI,KAAKG,aAAT,EACEE,aAAa,CAAC,KAAKF,aAAN,CAAb;AACH;;;wCAEmB;AAClB,UAAI,KAAKF,KAAL,CAAWK,OAAf,EAAwB;AACtB,aAAKC,gBAAL;AACH;;;2CAEsB;AACrB,WAAKC,eAAL;AACD;;;8CAEyBC,S,EAAW;AACnC,UAAI,CAAC,KAAKR,KAAL,CAAWK,OAAZ,IAAuBG,SAAS,CAACH,OAArC,EAA8C;AAC5C,aAAKC,gBAAL;AACD,OAFD,MAGK,IAAI,KAAKN,KAAL,CAAWK,OAAX,IAAsB,CAACG,SAAS,CAACH,OAArC,EAA8C;AACjD,aAAKE,eAAL;AACD;AACF;;;kCAEa;AAAA;;AACZ,UAAME,CAAC,GAAGC,IAAI,CAACC,GAAL,EAAV;AACA,UAAMV,CAAC,GAAG,KAAKD,KAAL,CAAWY,OAAX,IAAsB,KAAKZ,KAAL,CAAWa,OAA3C,CAFY,CAEyC;;AAErDC,MAAAA,KAAK,WAAI,KAAKd,KAAL,CAAWe,GAAf,qBAA6Bd,CAA7B,mBAAuCQ,CAAvC,EAAL,CACCO,IADD,CACM,UAAAC,GAAG,EAAI;AACX,eAAOA,GAAG,CAACC,IAAJ,EAAP;AACD,OAHD,EAICF,IAJD,CAIM,UAAAC,GAAG,EAAI;AACX,QAAA,MAAI,CAACE,QAAL,CAAc;AACZvB,UAAAA,QAAQ,EAAEqB;AADE,SAAd;AAGD,OARD;AASD,K,CAED;;;;yCACqBjB,K,EAAO,CAAE;;;yCACTA,K,EAAO,CAAE;;;6BAErB;AACPoB,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAK5B,KAAL,CAAWG,QAAX,CAAoB0B,MAAhC;AACA,aACE,6BAAC,0BAAD,QACI,KAAK7B,KAAL,CAAWG,QAAX,CAAoB2B,GAApB,CAAwB,UAAAC,CAAC;AAAA,eAAI,6BAAC,sBAAD;AAAe,UAAA,OAAO,EAAEA;AAAxB,UAAJ;AAAA,OAAzB,CADJ,CADF;AAKD;;;;EA9E0BC,sB;;eAiFdjC,c","sourcesContent":["import React from 'react';\n\nimport 'leaflet';\nimport { FeatureGroup,  MapLayer } from \"react-leaflet\";\n\nimport VehicleMarker from \"./VehicleMarker\";\n\n// polyfills\nimport 'promise-polyfill/src/polyfill';\nimport 'whatwg-fetch';\n\nclass SelectVehicles extends MapLayer {\n  state = {\n    selected_routes: [],\n    selected_stop: null,\n\n    vehicles: [],\n    route_data: []  // TBD Array of <RouteData > components, which comprise route and stop geo data\n  };\n\n  _startRefreshing() {\n    // initial vehicle refresh\n    this.getVehicles();\n\n    // get refresh values (default 10 seconds), and convert from secs to millisecs\n    let refresh = 10000;\n    if (this.props.refresh) {\n      let r = this.props.refresh;\n      if (r > 0 && r <= 100)\n        r = r * 1000;\n      if (r >= 1000 && r < 100000)\n        refresh = r;\n    }\n\n    // do the recurring refresh of the get vehicles AJAX call\n    this._refreshTimer = setInterval(() => {\n      this.getVehicles();\n    }, refresh);\n  }\n\n  _stopRefreshing() {\n    if (this._refreshTimer)\n      clearInterval(this._refreshTimer);\n  }\n\n  componentDidMount() {\n    if (this.props.visible) // ?? who sets this.props.visible\n      this._startRefreshing();\n  }\n\n  componentWillUnmount() {\n    this._stopRefreshing();\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (!this.props.visible && nextProps.visible) {\n      this._startRefreshing();\n    }\n    else if (this.props.visible && !nextProps.visible) {\n      this._stopRefreshing();\n    }\n  }\n\n  getVehicles() {\n    const d = Date.now();\n    const r = this.props.routeId || this.props.default;  // (might have to strip off TriMet, etc...\n\n    fetch(`${this.props.api}/routes/${r}?time=${d}`)\n    .then(res => {\n      return res.json();\n    })\n    .then(res => {\n      this.setState({\n        vehicles: res\n      });\n    });\n  }\n\n  // need to implement create interface (and update interface for older React-Leaflet versions)\n  createLeafletElement(props) {}\n  updateLeafletElement(props) {}\n\n  render() {\n    console.log(this.state.vehicles.length);\n    return (\n      <FeatureGroup>\n        { this.state.vehicles.map(v => <VehicleMarker vehicle={v} />) }\n      </FeatureGroup>\n    );\n  }\n}\n\nexport default SelectVehicles;\n"]}