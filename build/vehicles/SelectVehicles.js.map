{"version":3,"sources":["SelectVehicles.js"],"names":["SelectVehicles","state","selected_routes","selected_stop","vehicles","route_data","getVehicles","refresh","props","config","r","interval","setInterval","clearInterval","d","Date","now","routeId","default","fetch","url","then","res","json","setState","map","v","i","console","log","length","position","lat","lon","status","stopSequence","lastReport","seconds","min","Math","floor","sec","minStr","vehicle","vehicleId","indexOf","replace","stopLink","stopId","icon","routeType","routeShortName","heading","id","routeLongName","reportDate","L","Browser","mobile","React","Component"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport 'leaflet';\nimport 'leaflet-rotatedmarker';\nimport { Marker, Popup, Tooltip } from \"react-leaflet\";\nimport RotatedMarker from '../map/RotatedMarker';\nimport makeVehicleIcon from './icons';\nimport './vehicles.css';\n\n\nclass SelectVehicles extends React.Component {\n  state = {\n    selected_routes: [],\n    selected_stop: null,\n\n    vehicles: [],\n    route_data: []  // TBD Array of <RouteData > components, which comprise route and stop geo data\n  };\n\n  componentDidMount() {\n    this.getVehicles();\n\n    // get refresh values from config (default 5 seconds), and convert from secs to millisecs\n    let refresh = 5000;\n    if(this.props.config.refresh) {\n       let r = this.props.config.refresh;\n       if(r > 0 && r <= 100)\n         r = r * 1000;\n       if(r >= 1000 && r < 100000)\n         refresh = r;\n    }\n\n    // do the recurring refresh of the get vehicles AJAX call\n    this.interval = setInterval(() => {\n      this.getVehicles();\n    }, refresh);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  getVehicles() {\n    const d = Date.now();\n    const r = this.props.routeId || this.props.config.default;  // (might have to strip off TriMet, etc...\n\n    fetch(`${this.props.config.url}/routes/${r}?time=${d}`)\n      .then(res => {\n        return res.json();\n      })\n      .then(res => {\n        this.setState({\n          vehicles: res\n        });\n      });\n  }\n\n  render() {\n    return(\n      <div className=\"vehicles\">\n      {\n        this.state.vehicles.map((v, i) => {\n          console.log(this.state.vehicles.length);\n\n          const position = [v.lat, v.lon];\n\n          let status = \"unknown\";\n          if(v.status == \"IN_TRANSIT_TO\")\n            status = \"en-route to stop \";\n          else if(v.status == \"STOPPED_AT\")\n            if(v.stopSequence == 1)\n              status = \"beginning route from stop \";\n            else\n              status = \"stopped at \";\n\n          let lastReport = \"\";\n          if(v.seconds > 60) {\n            const min = Math.floor(v.seconds / 60);\n            const sec = v.seconds - min * 60;\n            const minStr = min == 1 ? \"minute\" : \"minutes\";\n\n            if(sec > 0)\n              lastReport = `${min} ${minStr} & ${sec} seconds ago`;\n            else\n              lastReport = `${min} ${minStr} ago`;\n          } else {\n            lastReport = `${v.seconds} seconds ago`;\n          }\n\n          let vehicle = \"\";\n          if(v.vehicleId.indexOf('+') > 0)\n            vehicle = \"Vehicles: \" + v.vehicleId.replace(/\\+/g, \", \");\n          else\n            vehicle = \"Vehicle: \" + v.vehicleId;\n\n          const stopLink = `https://trimet.org/ride/stop.html?stop_id=${v.stopId}`;\n          const icon = makeVehicleIcon(v.routeType, v.routeShortName);\n\n          // todo: put this valid 360 deg in service\n          let heading = v.heading;\n          if(heading == null || heading < 0 || heading >= 360)\n            heading = 1;\n\n          return (\n            <RotatedMarker rotationAngle={heading} rotationOrigin={'center center'} icon={icon} key={v.id} position={position} >\n              <Popup>\n                <span><b>{v.routeLongName}</b></span><br/>\n                <span>Last reported: {lastReport}</span><br/>\n                <span>Report date: {v.reportDate}</span><br/>\n                <span>Status: {status} <a target=\"#\" href={stopLink}>{v.stopId}</a></span><br/>\n                <span>{vehicle}</span><br/>\n              </Popup>\n              { (L.Browser.mobile !== true) &&\n                <Tooltip>\n                  <span><b>{v.routeShortName}</b>: {lastReport}</span>\n                </Tooltip>\n              }\n            </RotatedMarker>\n          );\n        })\n      }\n      </div>\n    )\n  }\n}\n\nexport default SelectVehicles;\n"]}