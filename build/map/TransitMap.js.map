{"version":3,"sources":["TransitMap.js"],"names":["TransitMap","state","leafletMap","baseLayer","props","config","baseLayers","baseLayersInitial","setState","leafletElement","locateOptions","position","strings","title","onActivate","m","center","zoom","maxZoom","url","attribution","currentLocation","overlays","map","overlayConfig","k","type","React","Component"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AAEA;;AACA;;AACA;;AAEA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;IAGMA,U;;;;;;;;;;;;;;;;0MACJC,K,GAAQ;AACNC,MAAAA,UAAU,EAAE,IADN;AAENC,MAAAA,SAAS,EAAE,MAAKC,KAAL,CAAWC,MAAX,CAAkBC,UAAlB,CAA6B,MAAKF,KAAL,CAAWC,MAAX,CAAkBE,iBAAlB,IAAuC,CAApE;AAFL,K;;;;;wCAKY;AAClB,WAAKC,QAAL,CAAc;AAACN,QAAAA,UAAU,EAAE,KAAKA,UAAL,CAAgBO;AAA7B,OAAd;AACD,K,CAED;AACA;AACA;AAEA;;;;sCAEkB;AAChB,UAAMC,aAAa,GAAG;AACpBC,QAAAA,QAAQ,EAAE,UADU;AAEpBC,QAAAA,OAAO,EAAE;AACLC,UAAAA,KAAK,EAAE;AADF,SAFW;AAKpBC,QAAAA,UAAU,EAAE,sBAAM,CAAE,CALA,CAKC;;AALD,OAAtB;AAOA,aAAOJ,aAAP;AACD;;;6BAEQ;AAAA;;AACP,aACE,0CACE,6BAAC,iBAAD;AACE,QAAA,GAAG,EAAE,aAAAK,CAAC,EAAI;AAAE,UAAA,MAAI,CAACb,UAAL,GAAkBa,CAAlB;AAAsB,SADpC;AAEE,QAAA,MAAM,EAAE,KAAKX,KAAL,CAAWY,MAFrB;AAGE,QAAA,IAAI,EAAE,KAAKZ,KAAL,CAAWa,IAHnB;AAIE,QAAA,OAAO,EAAE,KAAKb,KAAL,CAAWC,MAAX,CAAkBa,OAAlB,IAA6B;AAJxC,SAME,6BAAC,uBAAD;AACE,QAAA,GAAG,EAAE,KAAKjB,KAAL,CAAWE,SAAX,CAAqBgB,GAD5B;AAEE,QAAA,OAAO,EAAE,KAAKlB,KAAL,CAAWE,SAAX,CAAqBe,OAFhC;AAGE,QAAA,WAAW,EAAE,KAAKjB,KAAL,CAAWE,SAAX,CAAqBiB;AAHpC,QANF,EAYE,6BAAC,sBAAD,QACE,6BAAC,4BAAD;AAAS,QAAA,QAAQ,EAAC;AAAlB,SACE,6BAAC,yBAAD;AAAkB,QAAA,GAAG,EAAE,IAAvB;AAA6B,QAAA,UAAU,EAAE,KAAKhB,KAAL,CAAWC,MAAX,CAAkBC;AAA3D,QADF,EAEE,6BAAC,sBAAD;AAAe,QAAA,OAAO,EAAE,KAAKe,eAAL;AAAxB,QAFF,CADF,CAZF,EAmBE,6BAAC,2BAAD;AAAe,QAAA,QAAQ,EAAC;AAAxB,SACE,6BAAC,2BAAD,CAAe,OAAf;AAAuB,QAAA,IAAI,EAAC;AAA5B,SACC,KAAKjB,KAAL,CAAWC,MAAX,CAAkBiB,QAAlB,IAA8B,KAAKlB,KAAL,CAAWC,MAAX,CAAkBiB,QAAlB,CAA2BC,GAA3B,CAA+B,UAACC,aAAD,EAAgBC,CAAhB,EAAsB;AAClF,gBAAQD,aAAa,CAACE,IAAtB;AACE,eAAK,UAAL;AACE,mBACE,6BAAC,sBAAD,QACE,6BAAC,uBAAD;AAAgB,cAAA,OAAO,EAAE,IAAzB;AAA+B,cAAA,GAAG,EAAED;AAApC,eAA2CD,aAA3C,EADF,CADF;;AAKF;AACE,mBAAO,IAAP;AARJ;AAUD,OAX8B,CAD/B,CADF,CAnBF,CADF,CADF;AAwCD;;;;EApEsBG,eAAMC,S;;eAuEhB5B,U","sourcesContent":["import React from 'react';\nimport { Map, TileLayer, LayersControl } from 'react-leaflet';\n\nimport Control from 'react-leaflet-control';\nimport BaseLayerControl from './BaseLayerControl';\nimport LocateControl from './LocateControl';\n\nimport SelectVehicles from '../vehicles/SelectVehicles';\nimport AllVehicles from '../vehicles/AllVehicles';\nimport ErrorBoundary from '../common/ErrorBoundary';\n\n\nclass TransitMap extends React.Component {\n  state = {\n    leafletMap: null,\n    baseLayer: this.props.config.baseLayers[this.props.config.baseLayersInitial || 0]\n  };\n\n  componentDidMount() {\n    this.setState({leafletMap: this.leafletMap.leafletElement});\n  }\n\n  // TODO: using a single TileLayer, which we change URLs on, is a bit strange ... do multiple\n  // layers, and find a way to not render them in the layer switcher (e.g., config that as an\n  // option -- buttons or layer switcher).\n\n  // TODO: maxZoom on the map should be N (20 / 22); layers should then not zoom beyond their max\n\n  currentLocation() {\n    const locateOptions = {\n      position: 'topright',\n      strings: {\n          title: 'Show me where I am, yo!'\n      },\n      onActivate: () => {} // callback before engine starts retrieving locations\n    }\n    return locateOptions;\n  }\n\n  render() {\n    return (\n      <div>\n        <Map\n          ref={m => { this.leafletMap = m; }}\n          center={this.props.center}\n          zoom={this.props.zoom}\n          maxZoom={this.props.config.maxZoom || \"20\"}\n        >\n          <TileLayer\n            url={this.state.baseLayer.url}\n            maxZoom={this.state.baseLayer.maxZoom}\n            attribution={this.state.baseLayer.attribution}\n          />\n\n          <ErrorBoundary>\n            <Control position=\"topright\">\n              <BaseLayerControl map={this} baseLayers={this.props.config.baseLayers} />\n              <LocateControl options={this.currentLocation()} />\n            </Control>\n          </ErrorBoundary>\n\n          <LayersControl position=\"topright\">\n            <LayersControl.Overlay name=\"Real-Time Buses and Trains\">\n            {this.props.config.overlays && this.props.config.overlays.map((overlayConfig, k) => {\n              switch (overlayConfig.type) {\n                case 'vehicles':\n                  return (\n                    <ErrorBoundary>\n                      <SelectVehicles visible={true} key={k} {...overlayConfig} />\n                    </ErrorBoundary>\n                  );\n                default:\n                  return null;\n              }\n            })}\n            </LayersControl.Overlay>\n          </LayersControl>\n        </Map>\n      </div>\n    );\n  }\n}\n\nexport default TransitMap;\n"]}